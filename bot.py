import os
import re
import requests
import tempfile
import logging
import time
import random
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import instaloader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å TELEGRAM_BOT_TOKEN")

class InstagramDownloader:
    def __init__(self):
        self.L = instaloader.Instaloader(
            download_pictures=False,
            download_videos=False,
            save_metadata=False,
            compress_json=False,
            sleep=True,
            quiet=True
        )
        self.max_retries = 3
        self.request_delay = 2

    def _extract_shortcode(self, url: str) -> str:
        patterns = [
            r"instagram\.com/p/([^/?]+)",
            r"instagram\.com/reel/([^/?]+)",
            r"instagram\.com/tv/([^/?]+)",
            r"instagram\.com/stories/[^/]+/(\d+)"
        ]
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None

    def _get_media_items(self, post) -> list:
        try:
            if post.typename == 'GraphSidecar':
                return [
                    ('video' if node.is_video else 'photo', 
                     node.video_url if node.is_video else node.display_url)
                    for node in post.get_sidecar_nodes()
                ]
            return [
                ('video' if post.is_video else 'photo',
                 post.video_url if post.is_video else post.url)
            ]
        except Exception:
            return []

    async def _process_media(self, media_type, media_url, temp_dir, update, counter):
        try:
            ext = '.mp4' if media_type == 'video' else '.jpg'
            file_path = os.path.join(temp_dir, f"media_{counter.replace('/', '_')}{ext}")
            retry_count = 0

            while retry_count < self.max_retries:
                try:
                    response = requests.get(media_url, stream=True, timeout=60)
                    response.raise_for_status()
                    break
                except requests.exceptions.RequestException as e:
                    retry_count += 1
                    if retry_count >= self.max_retries:
                        raise
                    logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {retry_count}/{self.max_retries}")
                    time.sleep(1 + retry_count)

            file_size = int(response.headers.get('content-length', 0))
            max_size = 50 * 1024 * 1024

            if file_size > max_size:
                await update.message.reply_text(f"‚ö†Ô∏è –ú–µ–¥–∏–∞ {counter} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram ({file_size//1024//1024}MB)")
                return False

            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)

            if media_type == 'video':
                await update.message.reply_video(video=open(file_path, 'rb'), caption=f"üé¨ –í–∏–¥–µ–æ {counter}")
            else:
                await update.message.reply_photo(photo=open(file_path, 'rb'), caption=f"üñº –§–æ—Ç–æ {counter}")

            return True
        except Exception as e:
            logger.error(f"Media processing error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ {counter}: {str(e)}")
            return False

    async def download_media(self, url: str, update: Update):
        try:
            shortcode = self._extract_shortcode(url)
            if not shortcode:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram."

            with tempfile.TemporaryDirectory() as temp_dir:
                try:
                    post = instaloader.Post.from_shortcode(self.L.context, shortcode)
                except Exception as e:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}"

                media_items = self._get_media_items(post)
                if not media_items:
                    return "‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                results = []
                for idx, (media_type, media_url) in enumerate(media_items, 1):
                    result = await self._process_media(media_type, media_url, temp_dir, update, f"{idx}/{len(media_items)}")
                    results.append(result)
                    time.sleep(self.request_delay + random.uniform(0, 1))

                return "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" if all(results) else "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å"
        except Exception as e:
            logger.exception("Unexpected error")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
downloader = InstagramDownloader()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ Instagram Media Downloader\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, Reels –∏–ª–∏ IGTV. –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø–æ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã–π)."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if not re.match(r'https?://(www\.)?instagram\.com/(p|reel|tv|stories)/', url):
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Instagram.")
        return
    msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é...")
    result = await downloader.download_media(url, update)
    await msg.edit_text(result)

async def post_init(application: Application):
    bot_info = await application.bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω!")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = Application.builder().token(TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
