import os
import re
import requests
import tempfile
import instaloader
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å TELEGRAM_BOT_TOKEN")

class InstagramDownloader:
    def __init__(self):
        self.L = instaloader.Instaloader(
            dirname_pattern=tempfile.gettempdir(),
            download_pictures=False,
            download_videos=False,
            save_metadata=False,
            compress_json=False,
            sleep=True,  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            quiet=True
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.L.context._session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    async def download_media(self, url: str, update: Update):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode
            shortcode = self._extract_shortcode(url)
            if not shortcode:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            with tempfile.TemporaryDirectory() as temp_dir:
                post = instaloader.Post.from_shortcode(self.L.context, shortcode)
                
                media_items = self._get_media_items(post)
                if not media_items:
                    return "‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                results = []
                for idx, (media_type, media_url) in enumerate(media_items, 1):
                    result = await self._process_media(
                        media_type, media_url, temp_dir, update, 
                        f"{idx}/{len(media_items)}"
                    )
                    results.append(result)

                return "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" if all(results) else "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"

        except instaloader.exceptions.InstaloaderException as e:
            return f"‚ùå –û—à–∏–±–∫–∞ Instaloader: {str(e)}"
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

    def _extract_shortcode(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç shortcode –∏–∑ URL"""
        patterns = [
            r"instagram\.com/p/([^/?]+)",
            r"instagram\.com/reel/([^/?]+)", 
            r"instagram\.com/tv/([^/?]+)"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None

    def _get_media_items(self, post) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞"""
        if post.typename == 'GraphSidecar':
            return [
                ('video' if node.is_video else 'photo', 
                 node.video_url if node.is_video else node.display_url)
                for node in post.get_sidecar_nodes()
            ]
        return [
            ('video' if post.is_video else 'photo',
             post.video_url if post.is_video else post.url)
        ]

    async def _process_media(self, media_type, media_url, temp_dir, update, counter):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞"""
        try:
            ext = '.mp4' if media_type == 'video' else '.jpg'
            file_path = os.path.join(temp_dir, f"media_{counter.replace('/', '_')}{ext}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(media_url, stream=True, timeout=60)
            response.raise_for_status()
            
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if media_type == 'video':
                await update.message.reply_video(
                    video=open(file_path, 'rb'),
                    supports_streaming=True,
                    caption=f"–ú–µ–¥–∏–∞ {counter}"
                )
            else:
                await update.message.reply_photo(
                    photo=open(file_path, 'rb'),
                    caption=f"–ú–µ–¥–∏–∞ {counter}"
                )
                
            return True
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ {counter}: {str(e)}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
downloader = InstagramDownloader()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üì∏ Instagram Downloader\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞:\n"
        "‚Ä¢ –ü–æ—Å—Ç (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∫–∞—Ä—É—Å–µ–ª—å)\n"
        "‚Ä¢ Reels\n"
        "‚Ä¢ IGTV\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://www.instagram.com/p/Cxyz...\n"
        "–ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞.\n\n"
        "–í–∞–∂–Ω–æ: –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏"""
    url = update.message.text.strip()
    
    if not re.match(r'https?://(www\.)?instagram\.com/(p|reel|tv)/', url):
        await update.message.reply_text("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É Instagram")
        return
    
    msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
    result = await downloader.download_media(url, update)
    await msg.edit_text(result)

async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    bot_info = await application.bot.get_me()
    print(f"‚úÖ –ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    try:
        app = Application.builder().token(TOKEN).post_init(post_init).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()